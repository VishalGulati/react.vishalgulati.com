{"version":3,"sources":["components/Placeholder/logo.svg","components/AppHeader/AppHeader.js","components/AppFooter/AppFooter.js","components/Placeholder/Placeholder.js","components/Me/Me.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppHeader","react_default","a","createElement","className","AppFooter","id","target","rel","href","Placeholder","src","logo","alt","Component","Me","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","_this2","setTimeout","setState","components_AppHeader_AppHeader","components_Me_Me","components_Placeholder_Placeholder","components_AppFooter_AppFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8SCUzBC,eAJG,WAChB,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,4BCcMC,SAfG,WAChB,OACEJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,wCACuCH,EAAAC,EAAAC,cAAA,KACnCG,GAAG,cACHC,OAAO,SACPC,IAAI,sBACJC,KAAK,gCAJ8B,wBADvC,uBCSWC,0LAXX,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAMR,UAAU,mBAAmBS,IAAI,SACjDZ,EAAAC,EAAAC,cAAA,6DANgBW,cCUXC,SARJ,WACT,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,uBCuBSY,cAxBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAU,GAHKR,mFAMC,IAAAS,EAAAN,KAClBO,WAAW,WACTD,EAAKE,SAAS,CACZH,UAAU,KAEX,uCAGH,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2B,EAAD,MACCT,KAAKI,MAAMC,SAAWzB,EAAAC,EAAAC,cAAC4B,EAAD,MAAS9B,EAAAC,EAAAC,cAAC6B,EAAD,MAChC/B,EAAAC,EAAAC,cAAC8B,EAAD,cAnBUnB,aCKEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e9a2ef2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './AppHeader.css';\r\n\r\n/**\r\n * The application header\r\n */\r\nconst AppHeader = () => {\r\n  return <header className=\"app-header\">react.vishalgulati.com</header>;\r\n};\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport './AppFooter.css';\r\n\r\n/**\r\n * The application footer\r\n */\r\nconst AppFooter = () => {\r\n  return (\r\n    <footer className=\"app-footer\">\r\n      Designed and Coded by Vishal Gulati (<a\r\n        id=\"footer-link\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://www.vishalgulati.com\"\r\n      >\r\n        www.vishalgulati.com\r\n      </a>)\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default AppFooter;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './Placeholder.css';\r\n\r\nclass Placeholder extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"placeholder\">\r\n        <div className=\"placeholder-header\">\r\n          <img src={logo} className=\"placeholder-logo\" alt=\"logo\" />\r\n          <p>Loading the content in a short while...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import React from 'react';\r\nimport './Me.css';\r\n\r\n/**\r\n * The application body\r\n */\r\nconst Me = () => {\r\n  return (\r\n    <div className=\"app-me container-fluid\">\r\n      <div className=\"row\">Hi, I am Vishal!</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Me;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport AppFooter from './components/AppFooter/AppFooter';\nimport Placeholder from './components/Placeholder/Placeholder';\nimport Me from './components/Me/Me';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        isLoaded: true\n      });\n    }, 1500);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <AppHeader />\n        {this.state.isLoaded ? <Me /> : <Placeholder />}\n        <AppFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}